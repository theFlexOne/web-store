-- Generated by Supabase at 2023-09-25T14:36:13.240Z


SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE FUNCTION public.fn_after_create_customer_create_cart() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$BEGIN
  INSERT INTO public.carts (customer_id, created_at, updated_at) VALUES (NEW.id, now(), now());
  RETURN NEW;
END;
$$;

CREATE FUNCTION public.fn_after_create_user_create_customer() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$BEGIN
  INSERT INTO public.customers (id, user_id, created_at, updated_at) VALUES (NEW.id, NEW.id, now(), now());
  RETURN NEW;
END;
$$;

CREATE FUNCTION public.fn_check_product_variant_stock_before_order() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.quantity > (SELECT stock_quantity FROM inventory WHERE product_variant_id = NEW.product_variant_id) THEN
    RAISE EXCEPTION 'Insufficient stock for product variant %', NEW.product_variant_id;
  END IF;
  RETURN NEW;
END;
$$;

CREATE FUNCTION public.fn_create_categories(p_category_names text[]) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_cat_name text;
  v_cat_id bigint;
  v_parent_id bigint;
BEGIN
  v_parent_id := NULL;
  
  FOREACH v_cat_name IN ARRAY p_category_names
  loop
    v_cat_id := fn_create_single_category(v_cat_name);
   	insert into product_categories (category_id, parent_id) 
   	values (v_cat_id, v_parent_id)
   	returning id into v_parent_id;
  END LOOP;
  
  RETURN v_parent_id;
END;
$$;

CREATE FUNCTION public.fn_create_product(p_name text, p_description text, p_thumbnail text, p_price numeric, p_brand text, p_categories text[], p_tags text[]) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_brand_id bigint;
  v_category_id bigint;
  v_new_product_id uuid;
  v_error_context text;
  v_error_msg text;
BEGIN

  SELECT fn_find_or_create_brand(p_brand) INTO v_brand_id;
  SELECT fn_create_categories(p_categories) INTO v_category_id;

  INSERT INTO public.products (
    name,
    description,
    thumbnail,
    base_price,
    brand_id,
    category_id
  ) VALUES (
    p_name,
    p_description,
    p_thumbnail,
    p_price,
    v_brand_id,
    v_category_id
  )
  RETURNING id INTO v_new_product_id;

  PERFORM fn_create_product_tags(v_new_product_id, p_tags);

  RETURN v_new_product_id;

EXCEPTION
  WHEN OTHERS THEN
    GET STACKED DIAGNOSTICS v_error_context = PG_EXCEPTION_CONTEXT,
                             v_error_msg = MESSAGE_TEXT;
    RAISE EXCEPTION 'Error: %, Context: %', v_error_msg, v_error_context;
END;
$$;

CREATE FUNCTION public.fn_create_product(p_name text, p_description text, p_thumbnail text, p_price numeric, p_brand text, p_categories text[], p_tags text[], p_attributes text[]) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_brand_id bigint;
  v_category_id bigint;
  v_new_product_id uuid;
  v_error_context text;
  v_error_msg text;
  v_attribute text;
  v_attribute_id bigint;
BEGIN
  SELECT fn_find_or_create_brand(p_brand) INTO v_brand_id;
  SELECT fn_create_categories(p_categories) INTO v_category_id;

  INSERT INTO public.products (
    name,
    description,
    thumbnail,
    base_price,
    brand_id,
    category_id
  ) VALUES (
    p_name,
    p_description,
    p_thumbnail,
    p_price,
    v_brand_id,
    v_category_id
  )
  RETURNING id INTO v_new_product_id;

  PERFORM fn_create_product_tags(v_new_product_id, p_tags);

  FOREACH v_attribute IN ARRAY p_attributes LOOP
    SELECT id INTO v_attribute_id FROM attributes WHERE name = v_attribute;
    IF v_attribute_id IS NULL THEN
      INSERT INTO attributes (name) VALUES (v_attribute) RETURNING id INTO v_attribute_id;
    END IF;
    INSERT INTO product_attributes (attribute_id, product_id)
    VALUES (v_attribute_id, v_new_product_id);
  END LOOP;

  RETURN v_new_product_id;

EXCEPTION
  WHEN OTHERS THEN
    GET STACKED DIAGNOSTICS v_error_context = PG_EXCEPTION_CONTEXT,
                             v_error_msg = MESSAGE_TEXT;
    RAISE EXCEPTION 'Error: %, Context: %', v_error_msg, v_error_context;
END;
$$;

CREATE FUNCTION public.fn_create_product_categories(p_product_id uuid, p_category_id bigint) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
declare
	v_category_id bigint;
begin
	insert into product_categories (product_id, category_id)
	values (p_product_id, p_category_id)
	returning * into v_category_id;

	return v_category_id;
end;
$$;

CREATE FUNCTION public.fn_create_product_tags(p_product_id uuid, p_tags text[]) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    d_tag_id bigint;
    d_tag_name text;
BEGIN
    FOREACH d_tag_name IN ARRAY p_tags
    LOOP
        d_tag_id := fn_find_or_create_tag(d_tag_name);
        INSERT INTO public.product_tags (product_id, tag_id, created_at, updated_at) VALUES (p_product_id, d_tag_id, now(), now());
    END LOOP;
END;
$$;

CREATE FUNCTION public.fn_create_product_variant(p_product_id uuid, p_price_offset numeric, p_stock_quantity integer, p_image_urls text[], p_attributes json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_new_variant_id bigint;
  v_key text;
  v_value text;
  v_attribute_id bigint;
  v_product_attribute_id bigint;
BEGIN

  insert into product_variants (product_id, image_urls, price_offset)
  values (p_product_id, p_image_urls, p_price_offset)
  returning id into v_new_variant_id;

  insert into inventory (product_variant_id, stock_quantity)
  values (v_new_variant_id, p_stock_quantity);

  FOR v_key, v_value IN SELECT * FROM json_each_text(p_attributes)
  LOOP
    -- Find or create 'attributes' row for each key-value pair
    select a.id into v_attribute_id from attributes a
    join product_attributes pa on pa.attribute_id = a.id
    where a.name = v_key;

    if v_attribute_id is null then
	  raise exception 'Invalid product attribute';
    end if;

    -- Create new 'product_attributes' row linking the attribute to the product variant
    select id into v_product_attribute_id from product_attributes where attribute_id = v_attribute_id;

    if v_product_attribute_id is null then
      INSERT INTO product_attributes (product_id, attribute_id)
      VALUES (p_product_id, v_attribute_id)
      ON CONFLICT (product_id, attribute_id) DO NOTHING
      RETURNING id INTO v_product_attribute_id;
    end if;

    INSERT INTO product_variant_attributes (value, product_variant_id, product_attribute_id)
    VALUES (v_value, v_new_variant_id, v_product_attribute_id);

  END LOOP;
END;
$$;

CREATE FUNCTION public.fn_create_single_category(p_cat_name text) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_category_id bigint;
BEGIN
  select id into v_category_id from categories where name = p_cat_name;
 
  if v_category_id is null then
  	insert into categories (name) values (p_cat_name) returning id into v_category_id;	
  end if;
	  
  RETURN v_category_id;
END;
$$;

CREATE FUNCTION public.fn_create_single_category(p_cat_name text, p_parent_id bigint) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_category_id bigint;
BEGIN
  select id into v_category_id from categories where name = p_cat_name and parent_id = p_parent_id;
 
  if v_category_id is null then
  	insert into categories (name, parent_id) values (p_cat_name, p_parent_id) returning id into v_category_id;	
  end if;
	  
  RETURN v_category_id;
END;
$$;

CREATE FUNCTION public.fn_find_or_create_brand(p_name text) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_brand_id bigint;
BEGIN
  -- Check if the brand already exists
  SELECT id INTO v_brand_id FROM public.product_brands WHERE name = p_name;

  -- If it doesn't exist, create a new one
  IF v_brand_id IS NULL THEN
    INSERT INTO public.product_brands(name) VALUES (p_name) RETURNING id INTO v_brand_id;
  END IF;

  -- Return the brand ID
  RETURN v_brand_id;
END;
$$;

CREATE FUNCTION public.fn_find_or_create_tag(p_tag_name text) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
DECLARE
    d_tag_id bigint;
BEGIN
    SELECT id INTO d_tag_id FROM public.tags WHERE name = p_tag_name;
    IF d_tag_id IS NULL THEN
        INSERT INTO public.tags (name, created_at, updated_at) VALUES (p_tag_name, now(), now()) RETURNING id INTO d_tag_id;
    END IF;
    RETURN d_tag_id;
END;
$$;

CREATE FUNCTION public.fn_get_category_chain(p_product_id uuid) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
  d_category_id bigint;
  d_category_name text;
  d_chain text[];
BEGIN
  -- Get the category_id for the given product
  select category_id into d_category_id from products where p_product_id = id;

  -- Initialize the chain as an empty string
  d_chain := ARRAY[]::text[];
  
  -- Loop to build the category chain
  WHILE d_category_id IS NOT NULL LOOP
    SELECT name, parent_id INTO d_category_name, d_category_id FROM product_categories WHERE id = d_category_id;
    
    -- Add the category name to the array
    d_chain := array_prepend(d_category_name, d_chain);

  END LOOP;
  
  RETURN d_chain;
END;
$$;

CREATE FUNCTION public.fn_get_to_many_foreign_tables_array(p_table_name text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_result text[];
begin
	SELECT array_agg(ccu.table_name)
	into v_result
	FROM information_schema.table_constraints AS tc 
	JOIN information_schema.key_column_usage AS kcu
	    ON kcu.constraint_name = tc.constraint_name
	JOIN information_schema.constraint_column_usage AS ccu
	    ON ccu.constraint_name = tc.constraint_name
	WHERE tc.constraint_type = 'FOREIGN KEY' 
	AND tc.table_schema = 'public'
	AND tc.table_name = p_table_name;

    RETURN v_result;
end;
$$;

CREATE FUNCTION public.fn_get_to_one_foreign_tables_array(p_table_name text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_result text[];
BEGIN
	SELECT array_agg(tc.table_name)
	into v_result
	FROM information_schema.table_constraints AS tc 
	JOIN information_schema.key_column_usage AS kcu
	    ON kcu.constraint_name = tc.constraint_name
	JOIN information_schema.constraint_column_usage AS ccu
	    ON ccu.constraint_name = tc.constraint_name
	WHERE tc.constraint_type = 'FOREIGN KEY' 
	AND tc.table_schema = 'public'
	AND ccu.table_name = p_table_name;

    RETURN v_result;
END;
$$;

SET default_tablespace = '';

SET default_table_access_method = heap;

CREATE TABLE public.attributes (
    id bigint NOT NULL,
    name character varying(25) NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE public.attributes ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.attributes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public.cart_items (
    id bigint NOT NULL,
    cart_id bigint NOT NULL,
    product_variant_id bigint NOT NULL,
    quantity integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE public.cart_items ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.cart_items_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public.carts (
    id bigint NOT NULL,
    customer_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE public.carts ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.carts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public.categories (
    id bigint NOT NULL,
    name text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE public.categories ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.categories_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public.customer_addresses (
    id bigint NOT NULL,
    customer_id uuid NOT NULL,
    street text NOT NULL,
    street2 text,
    city text NOT NULL,
    state text NOT NULL,
    zip text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE public.customer_addresses ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.customer_addresses_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public.customers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    first_name character varying DEFAULT '""'::character varying,
    last_name character varying DEFAULT '""'::character varying,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

CREATE TABLE public.inventory (
    id bigint NOT NULL,
    product_variant_id bigint NOT NULL,
    stock_quantity integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE public.inventory ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.inventory_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public.order_items (
    id bigint NOT NULL,
    order_id uuid NOT NULL,
    product_variant_id bigint NOT NULL,
    quantity integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE public.order_items ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.order_items_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public.orders (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    customer_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

CREATE TABLE public.product_attributes (
    id bigint NOT NULL,
    product_id uuid NOT NULL,
    attribute_id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE public.product_attributes ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.product_attributes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public.product_brands (
    id bigint NOT NULL,
    name text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE public.product_brands ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.product_brands_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public.product_categories (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    category_id bigint NOT NULL,
    parent_id bigint
);

ALTER TABLE public.product_categories ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.product_categories_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public.product_reviews (
    id bigint NOT NULL,
    message text DEFAULT ''::text NOT NULL,
    rating smallint NOT NULL,
    customer_id uuid NOT NULL,
    product_variant_id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE public.product_reviews ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.product_reviews_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public.product_tags (
    id bigint NOT NULL,
    product_id uuid NOT NULL,
    tag_id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

CREATE TABLE public.tags (
    id bigint NOT NULL,
    name character varying NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE public.tags ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.product_tags_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE public.product_tags ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.product_tags_id_seq1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public.product_variant_attributes (
    id bigint NOT NULL,
    product_variant_id bigint,
    product_attribute_id bigint,
    value text NOT NULL
);

ALTER TABLE public.product_variant_attributes ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.product_variant_attributes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public.product_variants (
    id bigint NOT NULL,
    product_id uuid NOT NULL,
    image_urls text[] NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    price_offset numeric DEFAULT 0.00 NOT NULL
);

ALTER TABLE public.product_variants ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.product_variants_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE public.products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    description text DEFAULT ''::text NOT NULL,
    thumbnail text DEFAULT ''::text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    brand_id bigint,
    category_id bigint,
    base_price numeric DEFAULT 0.00
);

ALTER TABLE ONLY public.attributes
    ADD CONSTRAINT attributes_name_key UNIQUE (name);

ALTER TABLE ONLY public.attributes
    ADD CONSTRAINT attributes_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.cart_items
    ADD CONSTRAINT cart_items_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.carts
    ADD CONSTRAINT carts_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.categories
    ADD CONSTRAINT categories_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.customer_addresses
    ADD CONSTRAINT customer_addresses_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.customers
    ADD CONSTRAINT customers_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.inventory
    ADD CONSTRAINT inventory_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.order_items
    ADD CONSTRAINT order_items_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.orders
    ADD CONSTRAINT orders_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.product_attributes
    ADD CONSTRAINT product_attributes_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.product_attributes
    ADD CONSTRAINT product_attributes_product_id_attribute_id_key UNIQUE (product_id, attribute_id);

ALTER TABLE ONLY public.product_brands
    ADD CONSTRAINT product_brands_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.product_categories
    ADD CONSTRAINT product_categories_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.product_reviews
    ADD CONSTRAINT product_reviews_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT product_tags_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.product_tags
    ADD CONSTRAINT product_tags_pkey1 PRIMARY KEY (id);

ALTER TABLE ONLY public.product_variants
    ADD CONSTRAINT product_variants_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.products
    ADD CONSTRAINT products_name_key UNIQUE (name);

ALTER TABLE ONLY public.products
    ADD CONSTRAINT products_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.product_variant_attributes
    ADD CONSTRAINT variant_attributes_pkey PRIMARY KEY (id);

CREATE TRIGGER check_product_variant_stock_trigger BEFORE INSERT ON public.orders FOR EACH ROW EXECUTE FUNCTION public.fn_check_product_variant_stock_before_order();

CREATE TRIGGER trg_after_create_customer_create_cart AFTER INSERT ON public.customers FOR EACH ROW EXECUTE FUNCTION public.fn_after_create_customer_create_cart();

ALTER TABLE ONLY public.cart_items
    ADD CONSTRAINT cart_items_cart_id_fkey FOREIGN KEY (cart_id) REFERENCES public.carts(id) ON DELETE CASCADE;

ALTER TABLE ONLY public.cart_items
    ADD CONSTRAINT cart_items_product_variant_id_fkey FOREIGN KEY (product_variant_id) REFERENCES public.product_variants(id) ON DELETE CASCADE;

ALTER TABLE ONLY public.carts
    ADD CONSTRAINT carts_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(id) ON DELETE CASCADE;

ALTER TABLE ONLY public.customer_addresses
    ADD CONSTRAINT customer_addresses_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(id) ON DELETE CASCADE;

ALTER TABLE ONLY public.customers
    ADD CONSTRAINT customers_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;

ALTER TABLE ONLY public.inventory
    ADD CONSTRAINT inventory_product_variant_id_fkey FOREIGN KEY (product_variant_id) REFERENCES public.product_variants(id) ON DELETE CASCADE;

ALTER TABLE ONLY public.order_items
    ADD CONSTRAINT order_items_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id) ON DELETE CASCADE;

ALTER TABLE ONLY public.order_items
    ADD CONSTRAINT order_items_product_variant_id_fkey FOREIGN KEY (product_variant_id) REFERENCES public.product_variants(id) ON DELETE CASCADE;

ALTER TABLE ONLY public.orders
    ADD CONSTRAINT orders_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(id) ON DELETE CASCADE;

ALTER TABLE ONLY public.product_attributes
    ADD CONSTRAINT product_attributes_attribute_id_fkey FOREIGN KEY (attribute_id) REFERENCES public.attributes(id);

ALTER TABLE ONLY public.product_attributes
    ADD CONSTRAINT product_attributes_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id);

ALTER TABLE ONLY public.product_categories
    ADD CONSTRAINT product_categories_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.categories(id) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY public.product_categories
    ADD CONSTRAINT product_categories_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES public.product_categories(id) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY public.product_reviews
    ADD CONSTRAINT product_reviews_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(id) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY public.product_reviews
    ADD CONSTRAINT product_reviews_product_variant_id_fkey FOREIGN KEY (product_variant_id) REFERENCES public.product_variants(id) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY public.product_tags
    ADD CONSTRAINT product_tags_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;

ALTER TABLE ONLY public.product_tags
    ADD CONSTRAINT product_tags_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES public.tags(id) ON DELETE CASCADE;

ALTER TABLE ONLY public.product_variants
    ADD CONSTRAINT product_variants_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;

ALTER TABLE ONLY public.products
    ADD CONSTRAINT products_brand_id_fkey FOREIGN KEY (brand_id) REFERENCES public.product_brands(id) ON DELETE CASCADE;

ALTER TABLE ONLY public.products
    ADD CONSTRAINT products_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.product_categories(id) ON DELETE SET NULL;

ALTER TABLE ONLY public.product_variant_attributes
    ADD CONSTRAINT variant_attributes_product_attributes_fkey FOREIGN KEY (product_attribute_id) REFERENCES public.product_attributes(id);

ALTER TABLE ONLY public.product_variant_attributes
    ADD CONSTRAINT variant_attributes_product_variants_fkey FOREIGN KEY (product_variant_id) REFERENCES public.product_variants(id);

CREATE POLICY "Enable ALL for users based on user_id" ON public.customers TO authenticated USING ((auth.uid() = user_id)) WITH CHECK ((auth.uid() = user_id));

ALTER TABLE public.attributes ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.cart_items ENABLE ROW LEVEL SECURITY;

CREATE POLICY cart_items_access_policy ON public.cart_items TO authenticated, postgres USING ((auth.uid() IN ( SELECT cu.user_id
   FROM (public.carts ca
     JOIN public.customers cu ON ((cu.id = ca.customer_id)))
  WHERE (cart_items.cart_id = ca.id)))) WITH CHECK ((auth.uid() IN ( SELECT cu.user_id
   FROM (public.carts ca
     JOIN public.customers cu ON ((cu.id = ca.customer_id)))
  WHERE (cart_items.cart_id = ca.id))));

ALTER TABLE public.carts ENABLE ROW LEVEL SECURITY;

CREATE POLICY carts_policy ON public.carts TO authenticated USING ((auth.uid() IN ( SELECT c.user_id
   FROM public.customers c
  WHERE (c.id = carts.customer_id)))) WITH CHECK ((auth.uid() IN ( SELECT c.user_id
   FROM public.customers c
  WHERE (c.id = carts.customer_id))));

ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.customer_addresses ENABLE ROW LEVEL SECURITY;

CREATE POLICY customer_addresses_policy ON public.customer_addresses TO authenticated, postgres USING ((auth.uid() IN ( SELECT c.user_id
   FROM public.customers c
  WHERE (c.id = customer_addresses.customer_id)))) WITH CHECK ((auth.uid() IN ( SELECT c.user_id
   FROM public.customers c
  WHERE (c.id = customer_addresses.customer_id))));

ALTER TABLE public.customers ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.inventory ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.order_items ENABLE ROW LEVEL SECURITY;

CREATE POLICY order_items_access_policy ON public.order_items TO authenticated, postgres USING ((auth.uid() IN ( SELECT c.user_id
   FROM (public.orders o
     JOIN public.customers c ON ((c.id = o.customer_id)))
  WHERE (order_items.order_id = o.id)))) WITH CHECK ((auth.uid() IN ( SELECT c.user_id
   FROM (public.orders o
     JOIN public.customers c ON ((c.id = o.customer_id)))
  WHERE (order_items.order_id = o.id))));

ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;

CREATE POLICY orders_access_policy ON public.orders TO authenticated USING ((auth.uid() IN ( SELECT c.user_id
   FROM public.customers c
  WHERE (c.id = orders.customer_id)))) WITH CHECK ((auth.uid() IN ( SELECT c.user_id
   FROM public.customers c
  WHERE (c.id = orders.customer_id))));

ALTER TABLE public.product_attributes ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.product_brands ENABLE ROW LEVEL SECURITY;

CREATE POLICY product_brands_read_policy ON public.product_brands FOR SELECT;

ALTER TABLE public.product_categories ENABLE ROW LEVEL SECURITY;

CREATE POLICY product_categories_read_policy ON public.product_categories FOR SELECT;

ALTER TABLE public.product_reviews ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.product_tags ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.product_variant_attributes ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.product_variants ENABLE ROW LEVEL SECURITY;

CREATE POLICY product_variants_read_policy ON public.product_variants FOR SELECT USING (true);

ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;

CREATE POLICY products_read_policy ON public.products FOR SELECT USING (true);

CREATE POLICY public_admin_policy ON public.attributes FOR SELECT USING (true);

CREATE POLICY public_categories_access_policy ON public.categories FOR SELECT USING (true);

CREATE POLICY public_inventory_read_policy ON public.inventory FOR SELECT USING (true);

CREATE POLICY public_product_attributes_policy ON public.product_attributes FOR SELECT USING (true);

CREATE POLICY public_product_tags_policy ON public.product_tags FOR SELECT USING (true);

CREATE POLICY public_product_variant_attributes_policy ON public.product_variant_attributes FOR SELECT USING (true);

CREATE POLICY public_tags_policy ON public.tags FOR SELECT USING (true);

ALTER TABLE public.tags ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;

GRANT ALL ON FUNCTION public.fn_after_create_customer_create_cart() TO anon;
GRANT ALL ON FUNCTION public.fn_after_create_customer_create_cart() TO authenticated;
GRANT ALL ON FUNCTION public.fn_after_create_customer_create_cart() TO service_role;

GRANT ALL ON FUNCTION public.fn_after_create_user_create_customer() TO anon;
GRANT ALL ON FUNCTION public.fn_after_create_user_create_customer() TO authenticated;
GRANT ALL ON FUNCTION public.fn_after_create_user_create_customer() TO service_role;

GRANT ALL ON FUNCTION public.fn_check_product_variant_stock_before_order() TO anon;
GRANT ALL ON FUNCTION public.fn_check_product_variant_stock_before_order() TO authenticated;
GRANT ALL ON FUNCTION public.fn_check_product_variant_stock_before_order() TO service_role;

GRANT ALL ON FUNCTION public.fn_create_categories(p_category_names text[]) TO anon;
GRANT ALL ON FUNCTION public.fn_create_categories(p_category_names text[]) TO authenticated;
GRANT ALL ON FUNCTION public.fn_create_categories(p_category_names text[]) TO service_role;

GRANT ALL ON FUNCTION public.fn_create_product(p_name text, p_description text, p_thumbnail text, p_price numeric, p_brand text, p_categories text[], p_tags text[]) TO anon;
GRANT ALL ON FUNCTION public.fn_create_product(p_name text, p_description text, p_thumbnail text, p_price numeric, p_brand text, p_categories text[], p_tags text[]) TO authenticated;
GRANT ALL ON FUNCTION public.fn_create_product(p_name text, p_description text, p_thumbnail text, p_price numeric, p_brand text, p_categories text[], p_tags text[]) TO service_role;

GRANT ALL ON FUNCTION public.fn_create_product(p_name text, p_description text, p_thumbnail text, p_price numeric, p_brand text, p_categories text[], p_tags text[], p_attributes text[]) TO anon;
GRANT ALL ON FUNCTION public.fn_create_product(p_name text, p_description text, p_thumbnail text, p_price numeric, p_brand text, p_categories text[], p_tags text[], p_attributes text[]) TO authenticated;
GRANT ALL ON FUNCTION public.fn_create_product(p_name text, p_description text, p_thumbnail text, p_price numeric, p_brand text, p_categories text[], p_tags text[], p_attributes text[]) TO service_role;

GRANT ALL ON FUNCTION public.fn_create_product_categories(p_product_id uuid, p_category_id bigint) TO anon;
GRANT ALL ON FUNCTION public.fn_create_product_categories(p_product_id uuid, p_category_id bigint) TO authenticated;
GRANT ALL ON FUNCTION public.fn_create_product_categories(p_product_id uuid, p_category_id bigint) TO service_role;

GRANT ALL ON FUNCTION public.fn_create_product_tags(p_product_id uuid, p_tags text[]) TO anon;
GRANT ALL ON FUNCTION public.fn_create_product_tags(p_product_id uuid, p_tags text[]) TO authenticated;
GRANT ALL ON FUNCTION public.fn_create_product_tags(p_product_id uuid, p_tags text[]) TO service_role;

GRANT ALL ON FUNCTION public.fn_create_product_variant(p_product_id uuid, p_price_offset numeric, p_stock_quantity integer, p_image_urls text[], p_attributes json) TO anon;
GRANT ALL ON FUNCTION public.fn_create_product_variant(p_product_id uuid, p_price_offset numeric, p_stock_quantity integer, p_image_urls text[], p_attributes json) TO authenticated;
GRANT ALL ON FUNCTION public.fn_create_product_variant(p_product_id uuid, p_price_offset numeric, p_stock_quantity integer, p_image_urls text[], p_attributes json) TO service_role;

GRANT ALL ON FUNCTION public.fn_create_single_category(p_cat_name text) TO anon;
GRANT ALL ON FUNCTION public.fn_create_single_category(p_cat_name text) TO authenticated;
GRANT ALL ON FUNCTION public.fn_create_single_category(p_cat_name text) TO service_role;

GRANT ALL ON FUNCTION public.fn_create_single_category(p_cat_name text, p_parent_id bigint) TO anon;
GRANT ALL ON FUNCTION public.fn_create_single_category(p_cat_name text, p_parent_id bigint) TO authenticated;
GRANT ALL ON FUNCTION public.fn_create_single_category(p_cat_name text, p_parent_id bigint) TO service_role;

GRANT ALL ON FUNCTION public.fn_find_or_create_brand(p_name text) TO anon;
GRANT ALL ON FUNCTION public.fn_find_or_create_brand(p_name text) TO authenticated;
GRANT ALL ON FUNCTION public.fn_find_or_create_brand(p_name text) TO service_role;

GRANT ALL ON FUNCTION public.fn_find_or_create_tag(p_tag_name text) TO anon;
GRANT ALL ON FUNCTION public.fn_find_or_create_tag(p_tag_name text) TO authenticated;
GRANT ALL ON FUNCTION public.fn_find_or_create_tag(p_tag_name text) TO service_role;

GRANT ALL ON FUNCTION public.fn_get_category_chain(p_product_id uuid) TO anon;
GRANT ALL ON FUNCTION public.fn_get_category_chain(p_product_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.fn_get_category_chain(p_product_id uuid) TO service_role;

GRANT ALL ON FUNCTION public.fn_get_to_many_foreign_tables_array(p_table_name text) TO anon;
GRANT ALL ON FUNCTION public.fn_get_to_many_foreign_tables_array(p_table_name text) TO authenticated;
GRANT ALL ON FUNCTION public.fn_get_to_many_foreign_tables_array(p_table_name text) TO service_role;

GRANT ALL ON FUNCTION public.fn_get_to_one_foreign_tables_array(p_table_name text) TO anon;
GRANT ALL ON FUNCTION public.fn_get_to_one_foreign_tables_array(p_table_name text) TO authenticated;
GRANT ALL ON FUNCTION public.fn_get_to_one_foreign_tables_array(p_table_name text) TO service_role;

GRANT ALL ON TABLE public.attributes TO anon;
GRANT ALL ON TABLE public.attributes TO authenticated;
GRANT ALL ON TABLE public.attributes TO service_role;

GRANT ALL ON SEQUENCE public.attributes_id_seq TO anon;
GRANT ALL ON SEQUENCE public.attributes_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.attributes_id_seq TO service_role;

GRANT ALL ON TABLE public.cart_items TO anon;
GRANT ALL ON TABLE public.cart_items TO authenticated;
GRANT ALL ON TABLE public.cart_items TO service_role;

GRANT ALL ON SEQUENCE public.cart_items_id_seq TO anon;
GRANT ALL ON SEQUENCE public.cart_items_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.cart_items_id_seq TO service_role;

GRANT ALL ON TABLE public.carts TO anon;
GRANT ALL ON TABLE public.carts TO authenticated;
GRANT ALL ON TABLE public.carts TO service_role;

GRANT ALL ON SEQUENCE public.carts_id_seq TO anon;
GRANT ALL ON SEQUENCE public.carts_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.carts_id_seq TO service_role;

GRANT ALL ON TABLE public.categories TO anon;
GRANT ALL ON TABLE public.categories TO authenticated;
GRANT ALL ON TABLE public.categories TO service_role;

GRANT ALL ON SEQUENCE public.categories_id_seq TO anon;
GRANT ALL ON SEQUENCE public.categories_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.categories_id_seq TO service_role;

GRANT ALL ON TABLE public.customer_addresses TO anon;
GRANT ALL ON TABLE public.customer_addresses TO authenticated;
GRANT ALL ON TABLE public.customer_addresses TO service_role;

GRANT ALL ON SEQUENCE public.customer_addresses_id_seq TO anon;
GRANT ALL ON SEQUENCE public.customer_addresses_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.customer_addresses_id_seq TO service_role;

GRANT ALL ON TABLE public.customers TO anon;
GRANT ALL ON TABLE public.customers TO authenticated;
GRANT ALL ON TABLE public.customers TO service_role;

GRANT ALL ON TABLE public.inventory TO anon;
GRANT ALL ON TABLE public.inventory TO authenticated;
GRANT ALL ON TABLE public.inventory TO service_role;

GRANT ALL ON SEQUENCE public.inventory_id_seq TO anon;
GRANT ALL ON SEQUENCE public.inventory_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.inventory_id_seq TO service_role;

GRANT ALL ON TABLE public.order_items TO anon;
GRANT ALL ON TABLE public.order_items TO authenticated;
GRANT ALL ON TABLE public.order_items TO service_role;

GRANT ALL ON SEQUENCE public.order_items_id_seq TO anon;
GRANT ALL ON SEQUENCE public.order_items_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.order_items_id_seq TO service_role;

GRANT ALL ON TABLE public.orders TO anon;
GRANT ALL ON TABLE public.orders TO authenticated;
GRANT ALL ON TABLE public.orders TO service_role;

GRANT ALL ON TABLE public.product_attributes TO anon;
GRANT ALL ON TABLE public.product_attributes TO authenticated;
GRANT ALL ON TABLE public.product_attributes TO service_role;

GRANT ALL ON SEQUENCE public.product_attributes_id_seq TO anon;
GRANT ALL ON SEQUENCE public.product_attributes_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.product_attributes_id_seq TO service_role;

GRANT ALL ON TABLE public.product_brands TO anon;
GRANT ALL ON TABLE public.product_brands TO authenticated;
GRANT ALL ON TABLE public.product_brands TO service_role;
GRANT ALL ON TABLE public.product_brands TO PUBLIC;

GRANT ALL ON SEQUENCE public.product_brands_id_seq TO anon;
GRANT ALL ON SEQUENCE public.product_brands_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.product_brands_id_seq TO service_role;

GRANT ALL ON TABLE public.product_categories TO anon;
GRANT ALL ON TABLE public.product_categories TO authenticated;
GRANT ALL ON TABLE public.product_categories TO service_role;
GRANT ALL ON TABLE public.product_categories TO PUBLIC;

GRANT ALL ON SEQUENCE public.product_categories_id_seq TO anon;
GRANT ALL ON SEQUENCE public.product_categories_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.product_categories_id_seq TO service_role;

GRANT ALL ON TABLE public.product_reviews TO anon;
GRANT ALL ON TABLE public.product_reviews TO authenticated;
GRANT ALL ON TABLE public.product_reviews TO service_role;

GRANT ALL ON SEQUENCE public.product_reviews_id_seq TO anon;
GRANT ALL ON SEQUENCE public.product_reviews_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.product_reviews_id_seq TO service_role;

GRANT ALL ON TABLE public.product_tags TO anon;
GRANT ALL ON TABLE public.product_tags TO authenticated;
GRANT ALL ON TABLE public.product_tags TO service_role;

GRANT ALL ON TABLE public.tags TO anon;
GRANT ALL ON TABLE public.tags TO authenticated;
GRANT ALL ON TABLE public.tags TO service_role;

GRANT ALL ON SEQUENCE public.product_tags_id_seq TO anon;
GRANT ALL ON SEQUENCE public.product_tags_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.product_tags_id_seq TO service_role;

GRANT ALL ON SEQUENCE public.product_tags_id_seq1 TO anon;
GRANT ALL ON SEQUENCE public.product_tags_id_seq1 TO authenticated;
GRANT ALL ON SEQUENCE public.product_tags_id_seq1 TO service_role;

GRANT ALL ON TABLE public.product_variant_attributes TO anon;
GRANT ALL ON TABLE public.product_variant_attributes TO authenticated;
GRANT ALL ON TABLE public.product_variant_attributes TO service_role;

GRANT ALL ON SEQUENCE public.product_variant_attributes_id_seq TO anon;
GRANT ALL ON SEQUENCE public.product_variant_attributes_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.product_variant_attributes_id_seq TO service_role;

GRANT ALL ON TABLE public.product_variants TO anon;
GRANT ALL ON TABLE public.product_variants TO authenticated;
GRANT ALL ON TABLE public.product_variants TO service_role;
GRANT ALL ON TABLE public.product_variants TO PUBLIC;

GRANT ALL ON SEQUENCE public.product_variants_id_seq TO anon;
GRANT ALL ON SEQUENCE public.product_variants_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.product_variants_id_seq TO service_role;

GRANT ALL ON TABLE public.products TO anon;
GRANT ALL ON TABLE public.products TO authenticated;
GRANT ALL ON TABLE public.products TO service_role;
GRANT SELECT ON TABLE public.products TO PUBLIC;

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO service_role;

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO service_role;

