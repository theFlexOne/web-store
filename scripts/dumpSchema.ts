import { execSync } from 'child_process';
import fs from 'fs';

const HOST = "db.xagzrhyrpqmxzatzjvwk.supabase.co";
const DATABASE = "postgres";
const USERNAME = "postgres";
const PORT = 5432;
const SCHEMA = "public";

const DUMP_FOLDER = './';
const DEFAULT_FILENAME = 'schema.sql';

const pgDump = `pg_dump -h ${HOST} -d ${DATABASE} -U ${USERNAME} -p ${PORT} -n ${SCHEMA} -s -O --no-comments`;

const filename = process.argv[2] ?? DEFAULT_FILENAME;
const filepath = `${DUMP_FOLDER}/${filename}`;

function main() {
  const rawDump: string = execSync(pgDump).toString();

  const formatter = new SQLSchemaDumpFormatter(rawDump);
  const sql = formatter
    .removeComments()
    .removePublicSchemaCreation()
    .cleanup()
    .getSQL();

  fs.writeFileSync(filepath, sql);
}

/**
 * A class that formats SQL schema dump.
 */
export default class SQLSchemaDumpFormatter {
  /**
   * The original SQL schema dump.
   */
  private readonly originalSql: string;
  /**
   * The current SQL schema dump.
   */
  private sql: string;

  /**
   * Creates an instance of SQLSchemaDumpFormatter.
   * @param {string} sql - The SQL schema dump to format.
   */
  constructor(sql: string) {
    this.sql = sql;
    this.originalSql = sql;
  }

  /**
   * Removes comments from the SQL schema dump.
   * @returns {SQLSchemaDumpFormatter} - The instance of SQLSchemaDumpFormatter.
   */
  public removeComments(): SQLSchemaDumpFormatter {
    this.sql = removeComments(this.sql);
    return this;
  }

  /**
   * Removes public schema creation from the SQL schema dump.
   * @returns {SQLSchemaDumpFormatter} - The instance of SQLSchemaDumpFormatter.
   */
  public removePublicSchemaCreation(): SQLSchemaDumpFormatter {
    this.sql = removePublicSchemaCreation(this.sql);
    return this;
  }

  /**
   * Cleans up the SQL schema dump.
   * @returns {SQLSchemaDumpFormatter} - The instance of SQLSchemaDumpFormatter.
   */
  public cleanup(): SQLSchemaDumpFormatter {
    this.sql = cleanup(this.sql);
    return this;
  }

  /**
   * Gets the formatted SQL schema dump.
   * @returns {string} - The formatted SQL schema dump.
   */
  public getSQL(): string {
    const timestamp = new Date().toISOString();
    return `-- Generated by Supabase at ${timestamp}\n\n\n${this.sql}`;
  }
}

/**
 * Removes the creation and alteration of the public schema from the given SQL script.
 *
 * @param sql - The SQL script to modify.
 * @returns The modified SQL script with the public schema creation and alteration removed.
 */
function removePublicSchemaCreation(sql: string): string {
  const lines = sql.split('\n');
  const publicSchemaCreationIndex = lines.findIndex((line) =>
    line.startsWith('CREATE SCHEMA public;')
  );

  const publicSchemaAlterationIndex = lines.findIndex((line) =>
    line.startsWith('ALTER SCHEMA public OWNER TO')
  );

  if (publicSchemaCreationIndex > -1)
    lines.splice(publicSchemaCreationIndex, 1);

  if (publicSchemaAlterationIndex > -1)
    lines.splice(publicSchemaAlterationIndex, 1);

  return lines.join('\n');
}

/**
 * Removes comments from a SQL string.
 * @param sql - The SQL string to remove comments from.
 * @returns The SQL string without comments.
 */
function removeComments(sql: string): string {
  return sql
    .split('\n')
    .filter((query: string) => {
      return !query.startsWith('--');
    })
    .join('\n');
}

/**
 * Cleans up SQL code by removing any excessive newlines and trimming whitespace from the beginning of the string.
 * @param sql - The SQL code to clean up.
 * @returns The cleaned up SQL code.
 */
function cleanup(sql: string): string {
  return sql.replace(/\n\n\n+/g, '\n\n').trimStart();
}

main();
